name: Flask Test and Deploy to AWS

on:
  pull_request:
    branches:
      - main
  push:
  workflow_dispatch:  # Run workflow(수동 실행) 기능 활성화
    branches:
      - main

env:
  PYTHON_VERSION: '3.10'

jobs:
  # 환경 설정 및 테스트 진행
  setup:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage-check.outputs.coverage }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Python venv
        run: python -m venv venv

      - name: Install dependencies
        run: ./venv/bin/python -m pip install -r requirements.txt

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

#      - name: Run tests with coverage
#        run: ./venv/bin/python -m coverage run -m unittest discover -s tests -p "test_*.py"
#        shell: bash
#
#      - name: Check test coverage
#        id: coverage-check
#        run: |
#          ./venv/bin/python -m coverage report -m
#          COVERAGE=$(./venv/bin/python -m coverage report -m | grep TOTAL | awk '{print $6}' | sed 's/%//')
#          echo "Test coverage: $COVERAGE%"
#          echo "::set-output name=coverage::$COVERAGE"
#        shell: bash

  # PR일 경우, 테스트 커버리지를 PR Comment에 기록
  post-comment:
    needs: setup
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
#      - name: Post Test Coverage Report as PR Comment
#        run: |
#          COVERAGE=$(echo "${{ needs.setup.outputs.coverage }}" | awk '{print $1}')
#          COMMENT="#### Test Coverage Report\n\`\`\`\nTest coverage: ${COVERAGE}%\n\`\`\`"
#          echo $COMMENT | gh pr review ${{ github.event.pull_request.number }} --comment
#        env:
#          GH_TOKEN: ${{ github.token }}

  # main에 대한 push일 경우, 테스트 커버리지가 60% 이상이면 배포 진행
  deploy:
    needs: setup
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
#      - name: Check Test Coverage Threshold
#        id: check-coverage-threshold
#        run: |
#          COVERAGE=$(echo "${{ needs.setup.outputs.coverage }}" | awk '{print $1}')
#          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
#            echo "테스트 커버리지가 부족하여 배포를 취소합니다."
#            exit 1
#          fi
#        shell: bash

      - name: Remove venv
        run: rm -rf venv

      - name: Make zip file
        run: zip -qq -r ./moview_core.zip .
        shell: bash

      - name: Upload to S3
        run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./moview_core.zip s3://${{ secrets.S3_BUCKET_NAME }}/moview_core.zip --source .

      - name: Deploy to EC2
        id: deploy
        run: |
          DEPLOY_ID=$(aws deploy create-deployment \
          --application-name ${{ secrets.CODE_DEPLOY_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.CODE_DEPLOY_GROUP_NAME }} \
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=moview_core.zip \
          --query "[deploymentId]" --output text)

          echo "Deployment ID: $DEPLOY_ID"

          echo "Monitoring deployment status..."

          while true; do
            DEPLOY_STATUS=$(aws deploy get-deployment --deployment-id $DEPLOY_ID --query "[deploymentInfo.status]" --output text)

            case $DEPLOY_STATUS in
              Created|InProgress|Pending)
                echo "Deployment status: $DEPLOY_STATUS"
                ;;
              Succeeded)
                echo "Deployment completed successfully."
                break
                ;;
              Failed|Stopped|Error)
                echo "Deployment failed with status: $DEPLOY_STATUS"
                exit 1
                ;;
              *)
                echo "Unknown status: $DEPLOY_STATUS"
                exit 1
                ;;
            esac

            sleep 15
          done
        shell: bash
