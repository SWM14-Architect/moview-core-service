name: Flask CI/CD Pipeline with S3, CodeDeploy, EC2

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - '**'
  workflow_dispatch:  # GitHub의 Actions 탭의 Run workflow 기능 활성화 (코드 push 없이 워크플로우 시작 가능)

jobs:
  # main 외의 브랜치에 대한 push가 발생한 경우에는, 테스트만 진행한다.
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Python venv
        run: python -m venv venv

      - name: Install dependencies
        run: ./venv/bin/python -m pip install -r requirements.txt

      - name: Run tests with coverage
        run: ./venv/bin/python -m coverage run -m unittest discover -s tests -p "test_*.py"
        shell: bash

      - name: Check test coverage
        id: coverage-check
        run: |
          ./venv/bin/python -m coverage report -m
          COVERAGE=$(./venv/bin/python -m coverage report -m | grep TOTAL | awk '{print $6}' | sed 's/%//')
          echo "Test coverage: $COVERAGE%"
          echo "::set-output name=coverage::$COVERAGE"
        shell: bash

  # main에 대한 PR이 발생한 경우에는 PR Comment에 테스트 커버리지 기록 추가
  test_and_comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      # Repo 내용을 Checkout한다.
      - name: Checkout source code
        uses: actions/checkout@v3

      # Python 버전을 3.10으로 설정한다.
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 가상환경을 생성하고 활성화한다.
      - name: Setup Python venv
        run: python -m venv venv

      # requirements.txt의 패키지들을 설치한다.
      - name: Install dependencies
        run: ./venv/bin/python -m pip install -r requirements.txt

#      # 테스트를 실행한다.
#      - name: Run tests with coverage
#        run: ./venv/bin/python -m coverage run -m unittest discover -s tests -p "test_*.py"
#        shell: bash
#
#      # 테스트 커버리지를 확인한다.
#      - name: Check test coverage
#        id: coverage-check
#        run: |
#          ./venv/bin/python -m coverage report -m
#          COVERAGE=$(./venv/bin/python -m coverage report -m | grep TOTAL | awk '{print $6}' | sed 's/%//')
#          echo "Test coverage: $COVERAGE%"
#          echo "::set-output name=coverage::$COVERAGE"
#        shell: bash
#
#      # PR에 테스트 커버리지 결과를 남긴다.
#      - name: Post Test Coverage Report as PR Comment
#        run: |
#          COVERAGE=$(echo "${{ steps.coverage-check.outputs.coverage }}" | awk '{print $1}')
#          COMMENT="#### Test Coverage Report\n\`\`\`\nTest coverage: ${COVERAGE}%\n\`\`\`"
#          echo $COMMENT | gh pr review ${{ github.event.pull_request.number }} --comment
#        env:
#          GH_TOKEN: ${{ github.token }}


  # main에 대한 push가 발생했을 경우에는, 테스트 커버리지가 70% 이상인 경우에 S3-CodeDeploy-EC2로의 배포를 진행한다.
  # 또는 임의로 이벤트를 발생시켜서 deploy 워크플로우를 실행할 수 있다.
  deploy:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Python venv
        run: python -m venv venv

      - name: Install dependencies
        run: ./venv/bin/python -m pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

#      - name: Run tests with coverage
#        run: ./venv/bin/python -m coverage run -m unittest discover -s tests -p "test_*.py"
#        shell: bash
#
#      - name: Check test coverage
#        id: coverage-check
#        run: |
#          ./venv/bin/python -m coverage report -m
#          COVERAGE=$(./venv/bin/python -m coverage report -m | grep TOTAL | awk '{print $6}' | sed 's/%//')
#          echo "Test coverage: $COVERAGE%"
#          echo "::set-output name=coverage::$COVERAGE"
#        shell: bash
#
#      # 테스트 커버리지가 70% 이상인지 확인한다.
#      - name: Check Test Coverage Threshold
#        id: check-coverage-threshold
#        run: |
#          COVERAGE=$(echo "${{ steps.coverage-check.outputs.coverage }}" | awk '{print $1}')
#          if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
#            echo "::set-output name=deploy::true"
#          else
#            echo "::set-output name=deploy::false"
#          fi
#        shell: bash

      # 가상환경을 삭제한다.
      - name: Remove venv
        run: rm -rf venv

      # 배포를 위해 zip 파일을 생성한다. 항상 moview_core.zip라는 이름으로 생성한다.
      - name: Make zip file
        run: zip -qq -r ./moview_core.zip .
        shell: bash

      # S3에 zip 파일을 업로드한다.
      - name: Upload to S3
        run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./moview_core.zip s3://${{ secrets.S3_BUCKET_NAME }}/moview_core.zip --source .

#      # CodeDeploy를 이용하여 EC2에 배포한다.
#      - name: Deploy to EC2
#        run: |
#          if [ "${{ steps.check-coverage-threshold.outputs.deploy }}" = "true" ]; then
#            aws deploy create-deployment
#            --application-name ${{ secrets.CODE_DEPLOY_APP_NAME }}
#            --deployment-config-name CodeDeployDefault.AllAtOnce
#            --deployment-group-name ${{ secrets.CODE_DEPLOY_GROUP_NAME }}
#            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=moview_core.zip
#          else
#            echo "테스트 커버리지가 부족하여 배포를 취소합니다."
#          fi
#        shell: bash

      # CodeDeploy를 이용하여 EC2에 배포한다.
      - name: Deploy to EC2
        run: |
          aws deploy create-deployment \
          --application-name ${{ secrets.CODE_DEPLOY_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.CODE_DEPLOY_GROUP_NAME }} \
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=moview_core.zip
        shell: bash
